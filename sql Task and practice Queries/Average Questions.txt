#1
SELECT M.MEMBER_ID, M.MEMBER_NAME, B.BOOK_CODE, B.BOOK_TITLE
FROM LMS_MEMBERS M
JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
JOIN LMS_BOOK_DETAILS B ON BI.BOOK_CODE = B.BOOK_CODE;


#2
SELECT COUNT(*) AS NO_OF_BOOKS_AVAILABLE
FROM LMS_BOOK_DETAILS
WHERE BOOK_CODE NOT IN (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE);


#3
SELECT M.MEMBER_ID, M.MEMBER_NAME, F.FINE_RANGE, F.FINE_AMOUNT
FROM LMS_MEMBERS M
JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
JOIN LMS_FINE_DETAILS F ON BI.FINE_RANGE = F.FINE_RANGE
WHERE F.FINE_AMOUNT < 100;


#4
SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, BOOK_EDITION, PRICE, YEAR(PUBLISH_DATE) AS PUB_YEAR
FROM LMS_BOOK_DETAILS
ORDER BY PUB_YEAR, PUBLICATION, BOOK_EDITION;


#5
SELECT BOOK_CODE, BOOK_TITLE, RACK_NUM
FROM LMS_BOOK_DETAILS
WHERE RACK_NUM = 'A1'
ORDER BY BOOK_TITLE ASC;


#6
SELECT M.MEMBER_ID, M.MEMBER_NAME, BI.DATE_RETURN AS DUE_DATE, BI.DATE_RETURNED
FROM LMS_MEMBERS M
JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
WHERE BI.DATE_RETURNED > BI.DATE_RETURN;


#7
SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER
FROM LMS_MEMBERS
WHERE MEMBER_ID NOT IN (SELECT MEMBER_ID FROM LMS_BOOK_ISSUE);


#8
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE BI ON M.MEMBER_ID = BI.MEMBER_ID
LEFT JOIN LMS_FINE_DETAILS F ON BI.FINE_RANGE = F.FINE_RANGE
WHERE (F.FINE_AMOUNT = 0 OR F.FINE_AMOUNT IS NULL) 
AND YEAR(BI.DATE_RETURNED) = 2012;


#9
SELECT DATE_ISSUE, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_ISSUE
GROUP BY DATE_ISSUE
ORDER BY NOOFBOOKS DESC
LIMIT 1;


#10
SELECT BOOK_TITLE, SUPPLIER_ID
FROM LMS_BOOK_DETAILS
WHERE AUTHOR = 'Herbert Schildt' AND BOOK_EDITION = 5 AND SUPPLIER_ID = 'S01';


#11
SELECT RACK_NUM, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_DETAILS
GROUP BY RACK_NUM
ORDER BY RACK_NUM;


#12
SELECT 
    LBI.BOOK_ISSUE_NO,
    LM.MEMBER_NAME,
    LM.DATE_REGISTER AS DATE_OF_REGISTRATION,
    LM.DATE_EXPIRE AS DATE_OF_EXPIRY,
    LBD.BOOK_TITLE,
    LBD.CATEGORY,
    LBD.AUTHOR,
    LBD.PRICE,
    LBI.DATE_ISSUE,
    LBI.DATE_RETURN,
    LBI.DATE_RETURNED AS ACTUAL_RETURNED_DATE,
    CASE 
        WHEN LBI.DATE_RETURNED IS NULL THEN 'Issued'
        ELSE 'Returned'
    END AS ISSUE_STATUS,
    LFD.FINE_AMOUNT
FROM 
    LMS_BOOK_ISSUE LBI
JOIN 
    LMS_MEMBERS LM ON LBI.MEMBER_ID = LM.MEMBER_ID
JOIN 
    LMS_BOOK_DETAILS LBD ON LBI.BOOK_CODE = LBD.BOOK_CODE
LEFT JOIN 
    LMS_FINE_DETAILS LFD ON LBI.FINE_RANGE = LFD.FINE_RANGE;
    
    
    
#13    
SELECT 
    BOOK_CODE, 
    BOOK_TITLE, 
    PUBLISH_DATE
FROM 
    LMS_BOOK_DETAILS
WHERE 
    MONTH(PUBLISH_DATE) = 12;
    
    
    
#14   
SELECT 
    LBD.BOOK_CODE, 
    LBD.BOOK_TITLE, 
    LSD.SUPPLIER_NAME, 
    LBD.PRICE
FROM 
    LMS_BOOK_DETAILS LBD
JOIN 
    LMS_SUPPLIERS_DETAILS LSD ON LBD.SUPPLIER_ID = LSD.SUPPLIER_ID
WHERE 
    LBD.PRICE = (
        SELECT MAX(BD.PRICE)
        FROM LMS_BOOK_DETAILS BD
        WHERE BD.SUPPLIER_ID = LBD.SUPPLIER_ID
    );



#15
SELECT 
    BOOK_CODE, 
    BOOK_TITLE AS BOOK_NAME, 
    PUBLICATION AS PUBLISHER, 
    YEAR(CURDATE()) - YEAR(PUBLISH_DATE) AS BOOK_AGE
FROM 
    LMS_BOOK_DETAILS
ORDER BY 
    BOOK_AGE DESC;









